export default class json2html { constructor() { this.list = []; } #get_attrs(attrs_obj) { let output = "", attrs_array = Object.entries(attrs_obj); for (let index = 0; index < attrs_array.length; index++) { output += `${attrs_array[index][0]}="${attrs_array[index][1]}" `; } return output; } add(element) { this.list.push(element); return this; } get_html(input = this.list) { let output = ""; if (typeof input == "object" && input.length == undefined) { let array = Object.entries(input); for (let index = 0; index < array.length; index++) { const element = array[index]; if (element[1].length == 2) { if (typeof element[1][1] == "object") { output += `<${element[0]} ${this.#get_attrs( element[1][0] )}>${this.get_html(element[1][1])}</${element[0]}>`; } else output += `<${element[0]} ${this.#get_attrs( element[1][0] )}>${element[1][1]}</${element[0]}>`; } else output += `<${element[0]} ${this.#get_attrs( element[1][0] )}/>`; } return output; } for (let index = 0; index < input.length; index++) { output += this.get_html(input[index]); } return output; } repeater(what_to_repeat, how_many_times) { let output = []; for (let index = 0; index < how_many_times; index++) { output.push(what_to_repeat); } return output; } div(attributes = {}, innerHTML = "") { if (typeof attributes == "object" && attributes.length != undefined) { let output = []; for (let index = 0; index < attributes.length; index++) { try { output.push({ div: [attributes[index], innerHTML[index]] }); } catch (error) { alert(error); } } return output; } return { div: [attributes, innerHTML] }; } a(href = "#", innerHTML = "", attributes = {}) { if (typeof href == "object" && href.length != undefined) { let output = []; for (let index = 0; index < href.length; index++) { try { attributes[index].href = href[index]; output.push({ div: [attributes[index], innerHTML[index]] }); } catch (error) { alert(error); } } return output; } attributes.href = href; return { a: [attributes, innerHTML] }; } img(src = "", alt = "", attributes = {}) { if (typeof src == "object" && src.length != undefined) { let output = []; for (let index = 0; index < src.length; index++) { try { attributes[index].src = src[index]; attributes[index].alt = alt[index]; output.push({ div: [attributes[index], innerHTML[index]] }); } catch (error) { alert(error); } } return output; } attributes.src = src; attributes.alt = alt; return { img: [attributes] }; } }